name: Deploy to Amazon ECR

on:
  push:
    branches:
      - main
    paths:
      - 'docker/**'
      - '.github/workflows/deploy-to-ecr.yml'

permissions:
  id-token: write 
  contents: read 
  pull-requests: write 

jobs:
  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.get-image-uri.outputs.image_uri }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
        role-session-name: GitHub-OIDC

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}
        tags: |
          type=raw,value=v${{ github.run_number }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./docker
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

    - name: Get image URI
      id: get-image-uri
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        IMAGE_TAG: v${{ github.run_number }}
      run: |
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"
        echo "::notice ::Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-to-ec2:
    name: Deploy to EC2
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
        role-session-name: GitHub-OIDC-Deploy

    - name: Deploy to EC2 via SSM
      id: ssm-deploy
      env:
        INSTANCE_ID: ${{ vars.EC2_INSTANCE_ID }}
        IMAGE_URI: ${{ needs.docker-build-and-push.outputs.image-uri }}
        IMAGE_TAG: v${{ github.run_number }}
      run: |
        echo "Deploying image: $IMAGE_URI to instance: $INSTANCE_ID"
        
        COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --instance-ids "$INSTANCE_ID" \
          --parameters 'commands=[
            "echo \"=== Starting deployment of version '$IMAGE_TAG' ===\"",
            "cd /home/ssm-user",
            "sudo aws ecr get-login-password --region '${{ vars.AWS_REGION || 'us-east-1' }}' | sudo docker login --username AWS --password-stdin 540551285630.dkr.ecr.us-east-1.amazonaws.com",
            "cat > docker-compose-ecr.yml << '\''EOF'\''
services:
  api:
    image: '$IMAGE_URI'
    ports:
      - \"80:80\"
    volumes:
      - /mnt/efs/json-storage:/mnt/efs/json-storage
    environment:
      - STORAGE_PATH=/mnt/efs/json-storage
    restart: always
    healthcheck:
      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost/health\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
EOF",
            "echo \"=== Docker compose file created ===\"",
            "sudo docker-compose -f docker-compose-ecr.yml pull",
            "sudo docker-compose -f docker-compose-ecr.yml up -d",
            "echo \"=== Deployment completed ===\"",
            "sudo docker ps",
            "curl -f http://localhost/health || echo \"Health check failed\""
          ]' \
          --output text \
          --query 'Command.CommandId')
        
        echo "SSM Command ID: $COMMAND_ID"
        echo "command_id=$COMMAND_ID" >> "$GITHUB_OUTPUT"
        
        # Wait for command to complete (max 5 minutes)
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "$INSTANCE_ID" \
          --timeout 300 || true
        
        # Get command status
        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "$INSTANCE_ID" \
          --query 'Status' \
          --output text)
        
        echo "Deployment status: $STATUS"
        
        if [ "$STATUS" != "Success" ]; then
          echo "::error::Deployment failed with status: $STATUS"
          
          # Get error details
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'StandardErrorContent' \
            --output text
          
          exit 1
        fi
        
        echo "::notice ::Successfully deployed $IMAGE_TAG to EC2!"