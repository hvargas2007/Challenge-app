name: Deploy to Amazon ECR

on:
  push:
    branches:
      - main

permissions:
  id-token: write 
  contents: read 
  pull-requests: write 

jobs:
  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.get-image-uri.outputs.image_uri }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
        role-session-name: GitHub-OIDC

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}
        tags: |
          type=raw,value=v${{ github.run_number }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./docker
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

    - name: Get image URI
      id: get-image-uri
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        IMAGE_TAG: v${{ github.run_number }}
      run: |
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"
        echo "::notice ::Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-to-ec2:
    name: Deploy to EC2
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
        role-session-name: GitHub-OIDC-Deploy

    - name: Deploy to EC2 instances via SSM
      id: ssm-deploy
      env:
        INSTANCE_IDS: ${{ vars.EC2_INSTANCE_IDS }}
        IMAGE_URI: ${{ needs.docker-build-and-push.outputs.image-uri }}
        IMAGE_TAG: v${{ github.run_number }}
      run: |
        echo "Deploying image: $IMAGE_URI to instances: $INSTANCE_IDS"
        
        # Convert comma-separated IDs to array
        IFS=',' read -ra INSTANCES <<< "$INSTANCE_IDS"
        
        # Deploy to each instance ONE AT A TIME for zero downtime
        TOTAL_INSTANCES=${#INSTANCES[@]}
        CURRENT_INSTANCE=1
        
        for INSTANCE_ID in "${INSTANCES[@]}"; do
          INSTANCE_ID=$(echo "$INSTANCE_ID" | tr -d ' ')
          echo "=== Deploying to instance $CURRENT_INSTANCE of $TOTAL_INSTANCES: $INSTANCE_ID ==="
        
        COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --instance-ids "$INSTANCE_ID" \
          --parameters "commands=[
            \"echo '=== Starting Zero-Downtime deployment of version $IMAGE_TAG ===' \",
            \"cd /home/ssm-user\",
            \"sudo aws ecr get-login-password --region ${{ vars.AWS_REGION || 'us-east-1' }} | sudo docker login --username AWS --password-stdin 540551285630.dkr.ecr.us-east-1.amazonaws.com\",
            \"echo '=== Step 1: Pull new image ===' \",
            \"sudo docker pull $IMAGE_URI\",
            \"echo '=== Step 2: Find current container ===' \",
            \"CURRENT_CONTAINER=\\$(sudo docker ps --format '{{.Names}}' | grep -E '^api-|^docker-api-1' | head -1 || echo '')\",
            \"echo \\\"Current container: \\$CURRENT_CONTAINER\\\"\",
            \"echo '=== Step 3: Start new container on temporary port ===' \",
            \"sudo docker run -d --name api-temp-$IMAGE_TAG -p 8080:80 -v /mnt/efs/json-storage:/mnt/efs/json-storage -e STORAGE_PATH=/mnt/efs/json-storage --restart unless-stopped $IMAGE_URI\",
            \"echo '=== Step 4: Wait for new container to be healthy ===' \",
            \"RETRIES=30\",
            \"while [ \\$RETRIES -gt 0 ]; do\",
            \"  if curl -sf http://localhost:8080/health > /dev/null 2>&1; then\",
            \"    echo 'New container is healthy!'\",
            \"    break\",
            \"  fi\",
            \"  echo \\\"Waiting for health check... (\\$RETRIES retries left)\\\"\",
            \"  RETRIES=\\$((RETRIES-1))\",
            \"  sleep 2\",
            \"done\",
            \"if [ \\$RETRIES -eq 0 ]; then\",
            \"  echo 'ERROR: New container failed health check!'\",
            \"  sudo docker stop api-temp-$IMAGE_TAG\",
            \"  sudo docker rm api-temp-$IMAGE_TAG\",
            \"  exit 1\",
            \"fi\",
            \"echo '=== Step 5: Quick container swap ===' \",
            \"sudo docker rename api-temp-$IMAGE_TAG api-new-$IMAGE_TAG\",
            \"if [ ! -z \\\"\\$CURRENT_CONTAINER\\\" ]; then\",
            \"  sudo docker rename \\$CURRENT_CONTAINER api-old-$IMAGE_TAG\",
            \"fi\",
            \"sudo docker stop api-new-$IMAGE_TAG\",
            \"if [ ! -z \\\"\\$CURRENT_CONTAINER\\\" ]; then\",
            \"  sudo docker stop api-old-$IMAGE_TAG\",
            \"fi\",
            \"sudo docker run -d --name api-$IMAGE_TAG -p 80:80 -v /mnt/efs/json-storage:/mnt/efs/json-storage -e STORAGE_PATH=/mnt/efs/json-storage --restart unless-stopped $IMAGE_URI\",
            \"echo '=== Step 6: Cleanup old containers ===' \",
            \"sudo docker rm api-new-$IMAGE_TAG || true\",
            \"if [ ! -z \\\"\\$CURRENT_CONTAINER\\\" ]; then\",
            \"  sudo docker rm api-old-$IMAGE_TAG || true\",
            \"fi\",
            \"echo '=== Step 7: Final verification ===' \",
            \"sleep 2\",
            \"curl -sf http://localhost/health && echo 'Deployment successful!' || echo 'WARNING: Health check failed!'\",
            \"echo '=== Deployment completed! ===' \",
            \"sudo docker ps --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}' | grep -E '^api-'\"
          ]" \
          --output text \
          --query 'Command.CommandId')
        
        echo "SSM Command ID: $COMMAND_ID"
        echo "command_id=$COMMAND_ID" >> "$GITHUB_OUTPUT"
        
        # Wait for command to complete (check every 5 seconds, max 60 attempts = 5 minutes)
        echo "Waiting for command to complete..."
        COUNTER=0
        while [ $COUNTER -lt 60 ]; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'Status' \
            --output text)
          
          if [ "$STATUS" = "Success" ] || [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
            break
          fi
          
          echo "Status: $STATUS - waiting..."
          sleep 5
          COUNTER=$((COUNTER + 1))
        done
        
          echo "Final deployment status for $INSTANCE_ID: $STATUS"
          
          if [ "$STATUS" != "Success" ]; then
            echo "::error::Deployment to $INSTANCE_ID failed with status: $STATUS"
            
            # Get error details
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query 'StandardErrorContent' \
              --output text
            
            # Continue with next instance instead of exiting
            echo "::warning::Failed to deploy to $INSTANCE_ID, continuing with other instances..."
          else
            echo "::notice ::Successfully deployed $IMAGE_TAG to $INSTANCE_ID!"
            
            # Wait for ALB to mark instance as healthy before proceeding to next
            if [ $CURRENT_INSTANCE -lt $TOTAL_INSTANCES ]; then
              echo "Waiting 30 seconds for load balancer to recognize the updated instance..."
              sleep 30
            fi
          fi
          
          CURRENT_INSTANCE=$((CURRENT_INSTANCE + 1))
        done
        
        echo "::notice ::Deployment process completed for all instances!"