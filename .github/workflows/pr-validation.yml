name: PR Validation

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./docker
        file: ./docker/Dockerfile
        push: false
        tags: |
          challenge-app:pr-${{ github.event.pull_request.number }}
          challenge-app:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar

    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar
        retention-days: 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp

    - name: Load Docker image
      run: |
        docker load --input /tmp/image.tar
        docker images | grep challenge-app

    - name: Run Trivy vulnerability scanner
      id: trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: challenge-app:scan
        format: 'table'
        output: 'trivy-results.txt'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'  

    - name: Save Trivy results
      id: trivy-output
      run: |
        echo "results<<EOF" >> $GITHUB_OUTPUT
        cat trivy-results.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd docker
        pip install -r requirements.txt
        pip install pylint black isort safety bandit

    - name: Run code quality checks
      id: quality-checks
      run: |
        cd docker
        ISSUES=""
        
        # Black formatter
        if ! black --check main.py 2>&1 > /dev/null; then
          ISSUES="${ISSUES}- Formato de código necesita ajustes\n"
        fi
        
        # Check for hardcoded secrets
        if grep -E "(api_key|apikey|password|passwd|pwd|secret|token)" main.py | grep -v "API_TOKEN" | grep -v "Bearer" > /dev/null; then
          ISSUES="${ISSUES}- Posibles secretos en el código\n"
        fi
        
        echo "issues<<EOF" >> $GITHUB_OUTPUT
        echo "$ISSUES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  pr-comment:
    name: Comment PR Results
    runs-on: ubuntu-latest
    needs: [build, security-scan, code-quality]
    if: always()
    
    steps:
    - name: Comment PR results
      uses: actions/github-script@v7
      with:
        script: |
          const build = ${{ toJson(needs['build']) }};
          const securityScan = ${{ toJson(needs['security-scan']) }};
          const codeQuality = ${{ toJson(needs['code-quality']) }};
          
          let body = `### Resultado de la validación\n\n`;
          
          if (build.result === 'success' && securityScan.result === 'success' && codeQuality.result === 'success') {
            const issues = codeQuality.outputs && codeQuality.outputs['quality-checks.issues'];
            
            if (!issues || issues.trim() === '') {
              body += `Todo se ve bien! La imagen Docker se construyó correctamente.\n\n`;
              body += `Listo para hacer merge.`;
            } else {
              body += `La imagen se construyó bien, pero encontré estos detalles:\n\n`;
              body += issues;
              body += `\nSon sugerencias, puedes revisarlas o continuar.`;
            }
          } else {
            body += `Algo no salió bien en la validación. Revisa los detalles arriba.`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });