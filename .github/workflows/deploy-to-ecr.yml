name: Deploy to Amazon ECR

on:
  push:
    branches:
      - main
    paths:
      - 'docker/**'
      - '.github/workflows/deploy-to-ecr.yml'

jobs:
  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      image-uri: ${{ steps.get-image-uri.outputs.image_uri }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{date 'YYYYMMDD'}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=v${{ github.run_number }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./docker
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

    - name: Get image URI
      id: get-image-uri
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        IMAGE_TAG: v${{ github.run_number }}
      run: |
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"
        echo "::notice ::Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"